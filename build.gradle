buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.0.RELEASE"
    id 'org.springframework.boot' version '1.5.8.RELEASE'
    id 'net.saliman.cobertura' version '2.5.0'
}

allprojects {

    repositories.mavenCentral()

    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'project-report'

    idea.module.downloadJavadoc = true
    ext.springBootVersion = '1.5.8.RELEASE'
}

subprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "java"
    apply plugin: 'net.saliman.cobertura'

    version = '1.0'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.encoding = 'UTF-8'

    dependencyManagement.imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }

    ext.libraries = [
            vavr               : 'io.vavr:vavr:0.9.+',
            commons_lang3      : 'org.apache.commons:commons-lang3:3.+',
            jackson_annotations: 'com.fasterxml.jackson.core:jackson-annotations:2.9.+',
            jackson_core       : 'com.fasterxml.jackson.core:jackson-core:2.9.+',
            jackson_databind   : 'com.fasterxml.jackson.core:jackson-databind:2.9.+',
            mockito_core       : 'org.mockito:mockito-core:2.8.47'
    ]
}


project(':controller') {

    jar.baseName = 'taxy4fun-rest-controller'

    dependencies {
        compile project(':service-api')
        compile project(':test-utils')

        compile("org.springframework.boot:spring-boot-starter")
        compile libraries.vavr
        compile libraries.commons_lang3
        compile group: 'org.springframework', name: 'spring-webmvc', version: '4.+'
        compile libraries.jackson_annotations
        compile libraries.jackson_core
        compile libraries.jackson_databind

        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile libraries.mockito_core
        testRuntime 'javax.servlet:javax.servlet-api:3.1.0'
    }
}


project(':service-api') {

    jar.baseName = 'taxy4fun-service-api'

    dependencies {
        compile("org.springframework.boot:spring-boot-starter")
        compile libraries.vavr
        compile libraries.commons_lang3
        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile libraries.mockito_core
    }
}

project(':hello-world') {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'application'
    apply plugin: 'org.junit.platform.gradle.plugin'


    jar.baseName = 'taxy4fun-hello-world'


    dependencies {
        compile 'org.springframework.boot:spring-boot-starter'
        compile libraries.commons_lang3
        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.1'
        testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.1'
    }

    mainClassName = 'com.springuers.taxy4fun.HelloWorldApp'
}

project(':persistence') {

    jar.baseName = 'taxy4fun-persistence'

    dependencies {
        compile("org.springframework.boot:spring-boot-starter")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile libraries.commons_lang3
        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile "com.h2database:h2:1.4.+"
    }
}

project(':test-utils') {

    jar.baseName = 'taxy4fun-test-utils'

    dependencies {
        compile libraries.jackson_annotations
        compile libraries.jackson_core
        compile libraries.jackson_databind
    }

    bootRepackage.enabled = false
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        html.destination "${buildDir}/reports/jacoco/report.html"
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}
